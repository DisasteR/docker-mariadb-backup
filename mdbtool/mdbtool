#!/usr/bin/python3

import argparse, os
import importlib
import logging

PLUGIN_PKG = 'plugins'

ENTRY_MAP = {
    'backup'  : 'Backup',
    'multibackup'  : 'MultiBackup',
    'restore' : 'Restore'
}

class Main:

    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.initParser()

    def backup(self):
        if (self.args.list):
            self.listPlugins('backup')
            return
        plugin = self.args.plugin
        if not (plugin):
            print('plugin is required')
            exit(1)
        module = self.loadPlugin(plugin=plugin, entry='backup')
        module.main(self.args.args)

    def multibackup(self):
        plugin = self.args.plugin
        if not (plugin):
            print('plugin is required')
            exit(1)
        module = self.loadPlugin(plugin=plugin, entry='multibackup')
        module.main(self.args.args)

    def restore(self):
        plugin = self.args.plugin
        if not (plugin):
            print('plugin is required')
            exit(1)
        module = self.loadPlugin(plugin=plugin, entry='restore')
        module.main(self.args.args)

    def listPlugins(self, entry=None):
        for plugin in os.listdir(os.path.join(os.path.dirname(os.path.realpath(__file__)),PLUGIN_PKG)):
            module = None
            package = '.'.join([PLUGIN_PKG, plugin, ENTRY_MAP[entry] ])
            try:
                module = importlib.import_module(package)
                getattr(module, 'main')
                desc = ''
                if ( hasattr(module, 'DESCRIPTION') ):
                    desc = getattr(module, 'DESCRIPTION')
                print('{} - {}'.format(plugin,desc))
            except (ImportError, AttributeError):
                pass

    def loadPlugin(self, plugin=None, entry=None):
        module = None
        package = '.'.join([PLUGIN_PKG, plugin, ENTRY_MAP[entry] ])
        try:
            module = importlib.import_module(package)
            getattr(module, 'main')
        except ImportError :
            print('Enable to find %s' % '/'.join([PLUGIN_PKG, plugin, ENTRY_MAP[entry] + '.py' ]))
            exit(1)
        except AttributeError :
            print('%s should have method "main"' % package)
            exit(1)
        return module

    def initParser(self):
        self.parser = argparse.ArgumentParser(description='Tool for backing up mariaDB')
        self.parser.add_argument('--log', help='log level', choices=['warning','info','debug'])
        subparsers = self.parser.add_subparsers(
            title='commands',
            dest='command'
        )

        parser_backup = subparsers.add_parser('backup', help='backup database')
        parser_backup.add_argument('--list', help='list available plugins', action='store_true')
        parser_backup.add_argument('plugin', help='backup plugin', nargs='?')
        parser_backup.add_argument('args', nargs=argparse.REMAINDER)

        parser_multibackup = subparsers.add_parser('multibackup', help='multibackup database')
        parser_multibackup.add_argument('--list', help='list available plugins', action='store_true')
        parser_multibackup.add_argument('plugin', help='multibackup plugin', nargs='?')
        parser_multibackup.add_argument('args', nargs=argparse.REMAINDER)

        parser_restore = subparsers.add_parser('restore', help='restore database')
        parser_restore.add_argument('plugin', help='restore plugin')
        parser_restore.add_argument('args', nargs=argparse.REMAINDER)

    def exec(self):
        self.args = self.parser.parse_args()
        if self.args.log:
            logging.basicConfig(
                level=getattr(logging, self.args.log.upper(),None)
            )
        self.logger.debug('Parsed args : {}'.format(self.args))
        command = self.args.command
        if (command == 'backup'):
            self.backup()
        elif (command == 'multibackup'):
            self.multibackup()
        elif (command == 'restore'):
            self.restore()
        else :
            self.parser.print_help()
            exit(1)

if __name__ == '__main__':
    try:
        main = Main()
        main.exec()
    except KeyboardInterrupt:
        exit(0)
